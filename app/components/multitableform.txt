"use client";
import React, { useState } from 'react';

const InputForm = () => {
  const [tables, setTables] = useState<{ [key: string]: { columns: string[]; rows: any[] } }>({}); // Stores all tables
  const [currentTable, setCurrentTable] = useState<string>(''); // Selected table
  const [newTableName, setNewTableName] = useState(''); // Input for new table name

  const addNewTable = () => {
    if (newTableName && !tables[newTableName]) {
      setTables({
        ...tables,
        [newTableName]: { columns: [], rows: [] },
      });
      setNewTableName('');
      setCurrentTable(newTableName); // Automatically select the new table
    } else {
      alert('Table name is required or already exists');
    }
  };

  const addColumn = (columnName: string) => {
    if (currentTable && columnName) {
      const updatedTable = {
        ...tables[currentTable],
        columns: [...tables[currentTable].columns, columnName],
      };
      setTables({ ...tables, [currentTable]: updatedTable });
    }
  };

  const addRow = (rowData: { [key: string]: any }) => {
    if (currentTable) {
      const updatedTable = {
        ...tables[currentTable],
        rows: [...tables[currentTable].rows, rowData],
      };
      setTables({ ...tables, [currentTable]: updatedTable });
    }
  };

  return (
    <div>
      {/* Add new table */}
      <div>
        <input
          type="text"
          placeholder="New Table Name"
          value={newTableName}
          onChange={(e) => setNewTableName(e.target.value)}
        />
        <button onClick={addNewTable}>Add Table</button>
      </div>

      {/* Select table */}
      <div>
        <select
          value={currentTable || ''}
          onChange={(e) => setCurrentTable(e.target.value)}
        >
          <option value="" disabled>
            Select a Table
          </option>
          {Object.keys(tables).map((tableName) => (
            <option key={tableName} value={tableName}>
              {tableName}
            </option>
          ))}
        </select>
      </div>

      {/* Form for current table */}
      {currentTable && (
        <TableForm
          tableData={tables[currentTable]}
          onAddColumn={addColumn}
          onAddRow={addRow}
        />
      )}
    </div>
  );
};

interface TableFormProps {
  tableData: { columns: string[]; rows: any[] };
  onAddColumn: (columnName: string) => void;
  onAddRow: (rowData: { [key: string]: any }) => void;
}

const TableForm: React.FC<TableFormProps> = ({ tableData, onAddColumn, onAddRow }) => {
  const [columnName, setColumnName] = useState('');
  const [rowData, setRowData] = useState<{ [key: string]: any }>({});

  return (
    <div>
      <h2>Working on Table: </h2>
      {/* Add column */}
      <div>
        <input
          type="text"
          placeholder="Column Name"
          value={columnName}
          onChange={(e) => setColumnName(e.target.value)}
        />
        <button
          onClick={() => {
            onAddColumn(columnName);
            setColumnName('');
          }}
        >
          Add Column
        </button>
      </div>

      {/* Add row */}
      <div>
        {tableData.columns.map((col) => (
          <input
            key={col}
            type="text"
            placeholder={col}
            value={rowData[col] || ''}
            onChange={(e) => setRowData({ ...rowData, [col]: e.target.value })}
          />
        ))}
        <button
          onClick={() => {
            onAddRow(rowData);
            setRowData({});
          }}
        >
          Add Row
        </button>
      </div>
      <table>
        <thead>
          <tr>
            {tableData.columns.map((col) => (
              <th key={col}>{col}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {tableData.rows.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {tableData.columns.map((col) => (
                <td key={col}>{row[col]}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
      
    </div>

  );
};

export default InputForm;
